import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { toast } from 'sonner';
import { supabase } from '@/integrations/supabase/client';

const COMMUNITY_SEEDS = [
  {
    name: 'Artistes √âmergents',
    description: 'Communaut√© d√©di√©e aux nouveaux talents qui souhaitent partager leurs cr√©ations et obtenir des retours constructifs.',
    category: 'Musique',
    type: 'public',
    channels: [
      { name: 'g√©n√©ral', description: 'Discussions g√©n√©rales entre artistes' },
      { name: 'partage-cr√©ations', description: 'Partagez vos derni√®res compositions' },
      { name: 'conseils-techniques', description: '√âchanges sur les techniques de production' },
      { name: 'opportunit√©s', description: 'Annonces de concerts et collaborations' }
    ]
  },
  {
    name: 'Organisateurs d\'√âv√©nements',
    description: 'Espace pour les organisateurs de concerts, festivals et √©v√©nements musicaux.',
    category: '√âv√©nements',
    type: 'public',
    channels: [
      { name: 'g√©n√©ral', description: 'Discussions g√©n√©rales entre organisateurs' },
      { name: 'recherche-artistes', description: 'Postez vos recherches d\'artistes' },
      { name: 'retours-√©v√©nements', description: 'Partagez vos exp√©riences' },
      { name: 'bonnes-pratiques', description: 'Conseils et astuces d\'organisation' }
    ]
  },
  {
    name: 'Professionnels du Son',
    description: 'Communaut√© regroupant les ing√©nieurs du son, producteurs et techniciens audio.',
    category: 'Technique',
    type: 'public',
    channels: [
      { name: 'g√©n√©ral', description: 'Discussions g√©n√©rales sur l\'audio' },
      { name: 'mat√©riel', description: 'Conseils sur le mat√©riel audio' },
      { name: 'techniques-mixage', description: 'Partage de techniques de mixage' },
      { name: 'opportunit√©s-emploi', description: 'Offres d\'emploi dans l\'audio' }
    ]
  },
  {
    name: 'Musique √âlectronique',
    description: 'D√©di√©e aux passionn√©s de musique √©lectronique, producteurs et DJ.',
    category: 'Genre Musical',
    type: 'public',
    channels: [
      { name: 'g√©n√©ral', description: 'Discussions sur la musique √©lectronique' },
      { name: 'production', description: 'Techniques de production √©lectronique' },
      { name: 'mix-sets', description: 'Partagez vos mix et sets DJ' },
      { name: '√©v√©nements-√©lectro', description: 'Annonces de soir√©es et festivals' }
    ]
  },
  {
    name: 'Musique Acoustique',
    description: 'Pour les amoureux des instruments acoustiques et des performances live.',
    category: 'Genre Musical',
    type: 'public',
    channels: [
      { name: 'g√©n√©ral', description: 'Discussions sur la musique acoustique' },
      { name: 'instruments', description: 'Conseils sur les instruments acoustiques' },
      { name: 'techniques-jeu', description: 'Partage de techniques instrumentales' },
      { name: 'sessions-live', description: 'Organisation de sessions acoustiques' }
    ]
  }
];

const SAMPLE_MESSAGES = [
  'Bienvenue dans cette communaut√© ! N\'h√©sitez pas √† vous pr√©senter et √† partager vos projets.',
  'Excellente initiative de cr√©er cet espace d\'√©change ! H√¢te de voir les discussions qui vont na√Ætre ici.',
  'Merci pour cette communaut√©, c\'√©tait vraiment n√©cessaire sur Vybbi !',
  'Super ! J\'ai h√¢te de pouvoir √©changer avec d\'autres passionn√©s.',
  'Cette communaut√© va vraiment aider √† cr√©er du lien dans notre secteur.'
];

export default function CommunitySeeder() {
  const [isSeeding, setIsSeeding] = useState(false);
  const [progress, setProgress] = useState(0);

  const seedCommunities = async () => {
    setIsSeeding(true);
    setProgress(0);

    try {
      for (let i = 0; i < COMMUNITY_SEEDS.length; i++) {
        const communityData = COMMUNITY_SEEDS[i];
        
        // Create community
        const { data: community, error: communityError } = await supabase
          .from('communities')
          .insert({
            name: communityData.name,
            description: communityData.description,
            category: communityData.category,
            type: communityData.type,
            is_active: true
          })
          .select()
          .single();

        if (communityError) throw communityError;

        // Create channels for the community
        for (const channelData of communityData.channels) {
          const { error: channelError } = await supabase
            .from('community_channels')
            .insert({
              community_id: community.id,
              name: channelData.name,
              description: channelData.description,
              type: 'text'
            });

          if (channelError) throw channelError;
        }

        // Add some initial messages to the general channel
        const { data: generalChannel } = await supabase
          .from('community_channels')
          .select('id')
          .eq('community_id', community.id)
          .eq('name', 'g√©n√©ral')
          .single();

        if (generalChannel) {
          // Add sample messages from system/admin
          for (let j = 0; j < 2; j++) {
            const messageContent = SAMPLE_MESSAGES[j % SAMPLE_MESSAGES.length];
            
            const { error: messageError } = await supabase
              .from('community_messages')
              .insert({
                channel_id: generalChannel.id,
                sender_id: crypto.randomUUID(), // Mock sender
                content: messageContent,
                message_type: 'text'
              });

            if (messageError) console.warn('Message creation failed:', messageError);
          }
        }

        setProgress(((i + 1) / COMMUNITY_SEEDS.length) * 100);
      }

      toast.success(`${COMMUNITY_SEEDS.length} communaut√©s cr√©√©es avec succ√®s !`);
    } catch (error) {
      console.error('Community seeding failed:', error);
      toast.error('Erreur lors de la cr√©ation des communaut√©s');
    } finally {
      setIsSeeding(false);
      setProgress(0);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Initialisation des Communaut√©s</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="space-y-4">
          <p className="text-sm text-muted-foreground">
            Cette action va cr√©er {COMMUNITY_SEEDS.length} communaut√©s par d√©faut avec leurs canaux de discussion et quelques messages d'accueil.
          </p>

          <div className="grid gap-3">
            {COMMUNITY_SEEDS.map((community, index) => (
              <div key={index} className="p-3 border rounded-lg">
                <h4 className="font-medium">{community.name}</h4>
                <p className="text-sm text-muted-foreground mb-2">{community.description}</p>
                <p className="text-xs text-muted-foreground">
                  Canaux: {community.channels.map(c => c.name).join(', ')}
                </p>
              </div>
            ))}
          </div>
        </div>

        {isSeeding && (
          <div>
            <div className="flex justify-between text-sm mb-2">
              <span>Cr√©ation en cours...</span>
              <span>{Math.round(progress)}%</span>
            </div>
            <Progress value={progress} className="w-full" />
          </div>
        )}

        <Button 
          onClick={seedCommunities}
          disabled={isSeeding}
          className="w-full"
          size="lg"
        >
          {isSeeding ? 'Cr√©ation en cours...' : 'Cr√©er les Communaut√©s'}
        </Button>

        <div className="text-sm text-muted-foreground">
          <p>üí° Ces communaut√©s donneront vie √† la plateforme en cr√©ant des espaces d'√©change actifs.</p>
          <p>üìù Chaque communaut√© aura plusieurs canaux th√©matiques et des messages d'accueil.</p>
        </div>
      </CardContent>
    </Card>
  );
}